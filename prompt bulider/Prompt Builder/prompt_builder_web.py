import streamlit as st
import textwrap

# --- Configura√ß√£o da P√°gina Streamlit ---
st.set_page_config(
    page_title="Montador de Prompt VEO3 (Web)",
    page_icon="üé•", # Um emoji como √≠cone da aba do navegador
    layout="wide" # Ocupa a largura total da tela, o que √© √≥timo para abas e muitos elementos
)

# --- Defini√ß√£o dos Dados do Aplicativo ---
sections_data = {
    "Alma do V√≠deo": {
        "description": "Defina a ideia principal, o g√™nero e o sentimento que voc√™ quer transmitir. \n*Lembre-se: Para campos de texto livre, digite em ingl√™s para um prompt mais eficaz.*",
        "checkboxes": {
            "Objetivo/G√™nero": [
                ("Comercial", "Commercial"), ("Narrativa", "Narrative"), ("Educacional", "Educational"), ("V√≠deo Conceitual", "Concept Video"),
                ("V√≠deo Musical", "Music Video"), ("Estilo Documental", "Documentary Style"), ("Curta-metragem", "Short Film"), ("V√≠deo em Loop", "Looping Video")
            ],
            "Emo√ß√£o/Sentimento": [
                ("√âpico", "Epic"), ("Misterioso", "Mysterious"), ("Alegre", "Joyful"), ("Calmo", "Calm"), ("Intenso", "Intense"),
                ("Inspirador", "Inspirational"), ("Ca√≥tico", "Chaotic"), ("Nost√°lgico", "Nostalgic"), ("On√≠rico", "Dreamlike")
            ]
        },
        "text_inputs": {
            "Ideia Central (Frase Curta) - *DIGITE EM INGL√äS* (e.g., A cat playing with yarn)": {"key": "Idea Central", "required": True}
        }
    },
    "Universo Visual": {
        "description": "Configure o palco da sua cena, incluindo o local, a hora e o clima.",
        "checkboxes": {
            "Localiza√ß√£o": [
                ("Urbano", "Urban"), ("Floresta", "Forest"), ("Montanha", "Mountain"), ("Espa√ßo", "Space"), ("Subaqu√°tico", "Underwater"),
                ("Castelo", "Castle"), ("Cidade Cyberpunk", "Cyberpunk City"), ("Quarto Aconchegante", "Cozy Room"), ("Local Industrial", "Industrial Site")
            ],
            "Hora do Dia / Ilumina√ß√£o": [
                ("Amanhecer", "Sunrise"), ("P√¥r do Sol / Hora Dourada", "Sunset / Golden Hour"), ("Noite / C√©u Estrelado / Luar", "Night / Starry Sky / Moonlight"),
                ("Ilumina√ß√£o Dram√°tica", "Dramatic Lighting"), ("Luz Suave", "Soft Light"), ("Luzes Neon", "Neon Lights"), ("Luz de Velas", "Candlelight"), ("Ilumina√ß√£o Volum√©trica", "Volumetric Lighting")
            ],
            "Atmosfera / Clima": [
                ("Chuvoso", "Rainy"), ("Nevando", "Snowy"), ("Nebuloso", "Foggy"), ("Ventoso", "Windy"), ("Brilhante", "Bright"), ("Sombrio", "Gloomy"),
                ("Pac√≠fico", "Peaceful"), ("Tempestuoso", "Stormy"), ("Antigo", "Ancient"), ("Futurista", "Futuristic"), ("M√°gico", "Magical")
            ]
        },
        "text_inputs": {
            "Localiza√ß√£o Espec√≠fica (Opcional) - *DIGITE EM INGL√äS* (e.g., Golden Gate Bridge)": {"key": "Specific Location", "required": False},
            "Detalhes de Ilumina√ß√£o Adicionais (Opcional) - *DIGITE EM INGL√äS* (e.g., Sunlight filtering through leaves)": {"key": "Additional Lighting Details", "required": False}
        }
    },
    "Protagonistas": {
        "description": "Detalhe os principais elementos visuais (pessoas, objetos, criaturas).",
        "checkboxes": {
            "Tipo Principal": [
                ("Homem", "Man"), ("Mulher", "Woman"), ("Crian√ßa", "Child"), ("Idoso", "Elderly Person"), ("Cachorro", "Dog"), ("Gato", "Cat"), ("Lobo", "Wolf"), ("√Åguia", "Eagle"),
                ("Drag√£o", "Dragon"), ("Unic√≥rnio", "Unicorn"), ("Rob√¥", "Robot"), ("Androide", "Android"), ("Drone", "Drone"),
                ("Carro", "Car"), ("Nave Espacial", "Spaceship"), ("Espada", "Sword"), ("Livro", "Book"), ("Bola de Cristal", "Crystal Ball"), ("Artefato Antigo", "Ancient Artifact"),
                ("Forma Abstrata", "Abstract Shape"), ("Enxame de Part√≠culas", "Particle Swarm")
            ],
             "Estado / A√ß√£o Prim√°ria (Inicial) - Se aplic√°vel": [
                ("Parado", "Standing Still"), ("Sentado", "Sitting"), ("Deitado", "Lying Down"), ("Em Movimento", "Moving"),
                ("Brilhando", "Glowing"), ("Saindo Fuma√ßa", "Smoking"), ("Quebrado", "Broken"), ("Transformando", "Transforming"), ("Sorrindo", "Smiling"), ("Franzindo a testa", "Frowning"), ("Determinado", "Determined"), ("Assustado", "Afraid")
            ]
        },
        "text_inputs": {
            "Caracter√≠sticas da Apar√™ncia (e.g., Black and white cat, Green eyes) - *DIGITE EM INGL√äS*": {"key": "Appearance Characteristics", "required": False},
            "Tipo Espec√≠fico (Se n√£o estiver na lista - e.g., Giraffe, Tank) - *DIGITE EM INGL√äS*": {"key": "Specific Type", "required": False}
        }
    },
    "Coreografia": {
        "description": "Defina o que acontece na cena e como a 'c√¢mera' se move.",
        "checkboxes": {
            "A√ß√µes dos Sujeitos": [
                ("Correndo", "Running"), ("Voando", "Flying"), ("Nadando", "Swimming"), ("Saltando", "Jumping"), ("Caindo", "Falling"), ("Subindo", "Rising"),
                ("Transformando", "Transforming"), ("Dissolvendo", "Dissolving"), ("Aparecendo", "Appearing"), ("Lutando", "Fighting"), ("Dan√ßando", "Dancing"), ("Meditando", "Meditating"), ("Interagindo", "Interacting")
            ],
            "Movimento de C√¢mera (Escolha um ou mais)": [
                ("C√¢mera Fixa", "Static Shot"), ("Panor√¢mica Lenta Esquerda", "Slow Pan Left"), ("Panor√¢mica Lenta Direita", "Slow Pan Right"), ("Inclina√ß√£o R√°pida Cima", "Fast Tilt Up"), ("Inclina√ß√£o R√°pida Baixo", "Fast Tilt Down"),
                ("Travelling Suave Frente", "Smooth Dolly Forward"), ("Travelling Suave Tr√°s", "Smooth Dolly Backward"), ("C√¢mera Acompanhando", "Tracking Shot"),
                ("C√¢mera Elevada Descendo", "Crane Shot Descending"), ("C√¢mera Elevada Subindo", "Crane Shot Ascending"), ("C√¢mera Orbitando", "Orbiting Camera"),
                ("Efeito C√¢mera na M√£o", "Handheld Camera Effect"), ("Zoom In", "Zoom In"), ("Zoom Out", "Zoom Out")
            ],
            "Plano / Enquadramento Inicial": [
                ("Plano Geral Extremo", "Extreme Wide Shot"), ("Plano Geral", "Wide Shot"), ("Plano M√©dio", "Medium Shot"),
                ("Plano Fechado", "Close-Up"), ("Plano Detalhe", "Extreme Close-Up"), ("Vista em Primeira Pessoa", "First-Person View"),
                ("Vista A√©rea", "Bird's Eye View"), ("Plano de Baixo √Çngulo", "Low Angle Shot")
            ]
        },
         "text_inputs": {
            "A√ß√£o Espec√≠fica Adicional (Opcional) - *DIGITE EM INGL√äS* (e.g., Character opens a mystical book)": {"key": "Specific Action", "required": False},
            "Detalhes de Movimento de C√¢mera (e.g., Zoom In to the eye) - *DIGITE EM INGL√äS*": {"key": "Camera Movement Details", "required": False},
            "Sujeito para Orbitar (se 'C√¢mera Orbitando' selecionado) - *DIGITE EM INGL√äS*": {"key": "Subject to Orbit", "required": False}
         }
    },
    "Assinatura Art√≠stica": {
        "description": "Escolha o estilo visual, paleta de cores e qualidade t√©cnica. Ouse ser original!",
        "checkboxes": {
            "Estilo Art√≠stico": [
                ("Fotorrealista", "Photorealistic"), ("Cinematogr√°fico", "Cinematic"), ("Cena de Filme de Alto Or√ßamento", "High-Budget Film Still"), ("Estilo Anime", "Anime Style"), ("Estilo Cartoon", "Cartoon Style"),
                ("Estilo Pintura a √ìleo", "Oil Painting Style"), ("Estilo Aquarela", "Watercolor Style"), ("Pixel Art", "Pixel Art"), ("Voxel Art", "Voxel Art"), ("Abstrato Geom√©trico", "Abstract Geometric"),
                ("Surreal", "Surreal"), ("On√≠rico", "Dreamlike"), ("Cyberpunk", "Cyberpunk"), ("Steampunk", "Steampunk"), ("Dieselpunk", "Dieselpunk"),
                ("Arte Fant√°stica", "Fantasy Art"), ("Arte de Fic√ß√£o Cient√≠fica", "Sci-Fi Art"), ("Estilo Noir", "Noir Style"), ("Efeitos Visuais (VFX)", "VFX")
            ],
            "Paleta de Cores / Atmosfera Visual": [
                ("Cores Vibrantes", "Vibrant Colors"), ("Paleta Suave", "Muted Palette"), ("Monocrom√°tico", "Monochromatic"), ("Preto e Branco", "Black and White"),
                ("Tons Dourados", "Golden Tones"), ("Tons Frios", "Cool Tones"), ("Tons Quentes", "Warm Tones"), ("Cores Pastel", "Pastel Colors")
            ],
            "Qualidade / Efeitos Visuais": [
                ("Alta Defini√ß√£o", "High Definition"), ("4K", "4K"), ("8K", "8K"), ("Alto Detalhe", "High Detail"), ("Foco N√≠tido", "Sharp Focus"),
                ("Gr√£o de Filme", "Film Grain Effect"), ("Efeito Bokeh", "Bokeh Effect"), ("Lens Flare", "Lens Flare"), ("Sombras Dram√°ticas", "Dramatic Shadows"),
                ("Anima√ß√£o Suave", "Smooth Animation")
            ]
        },
        "text_inputs": {
            "Estilo Espec√≠fico ou Refer√™ncia (e.g., in the style of Salvador Dal√≠, similar to Blade Runner movie) - *DIGITE EM INGL√äS*": {"key": "Specific Style/Reference", "required": False},
            "Paleta de Cores Espec√≠fica Adicional (Opcional) - *DIGITE EM INGL√äS*": {"key": "Additional Color Palette", "required": False},
            "Efeitos Visuais Adicionais (Opcional) - *DIGITE EM INGL√äS*": {"key": "Additional Visual Effects", "required": False}
        }
    },
    "Par√¢metros T√©cnicos": {
        "description": "Defina as configura√ß√µes t√©cnicas como formato, dura√ß√£o, velocidade e elementos a excluir (prompt negativo).",
        "checkboxes": {
             "Velocidade / Ritmo": [
                ("Velocidade Normal", "Normal Speed"), ("C√¢mera R√°pida (Time-Lapse)", "Time-Lapse"), ("C√¢mera Lenta (Slow Motion)", "Slow Motion"), ("Ritmo R√°pido", "Fast-Paced"), ("Ritmo Lento", "Slow-Paced")
            ],
            "Loop": [("V√≠deo em Loop Cont√≠nuo", "Seamless Loop")]
        },
         "text_inputs": {
            "Formato / Propor√ß√£o (e.g., Horizontal 16:9, Vertical 9:16, Square 1:1) - *DIGITE EM INGL√äS*": {"key": "Format / Aspect Ratio", "required": False},
            "Dura√ß√£o Aproximada em Segundos (e.g., 10s)": {"key": "Approximate Duration", "required": False},
            "Prompt Negativo (o que N√ÉO deve aparecer - *DIGITE EM INGL√äS*)": {"key": "Negative Prompt", "required": False} # Campo para Prompt Negativo
         }
    }
}

# --- T√≠tulo Principal do Aplicativo ---
st.title("ÔøΩÔøΩ Montador de Prompt para V√≠deo VEO3 (Web)")
st.markdown("Bem-vindo, Caio! Crie prompts poderosos para seus v√≠deos IA. ‚ú®")

# --- Inicializa st.session_state para guardar os valores ---
if 'generated_prompt' not in st.session_state:
    st.session_state.generated_prompt = ""
if 'partial_prompt' not in st.session_state:
    st.session_state.partial_prompt = ""
if 'required_fields_missing' not in st.session_state:
    st.session_state.required_fields_missing = False


# A fun√ß√£o 'clear_all_inputs' foi removida, pois o bot√£o n√£o existe mais.

# --- Constru√ß√£o das Abas com st.tabs() ---
tab_titles = list(sections_data.keys())
tabs = st.tabs(tab_titles)

all_selected_keywords = {}
all_text_inputs = {}
required_fields_filled = {}

for i, tab_name in enumerate(tab_titles):
    with tabs[i]:
        data = sections_data[tab_name]
        st.markdown(f"**_{data['description']}_**")

        # --- Se√ß√µes de Checkboxes ---
        if "checkboxes" in data:
            for section_title, keywords_list in data["checkboxes"].items():
                st.subheader(section_title)
                cols = st.columns(3)
                col_idx = 0

                for pt_label, en_keyword in keywords_list:
                    checkbox_key = f"checkbox_{tab_name}_{section_title}_{en_keyword}"

                    with cols[col_idx]:
                        selected = st.checkbox(pt_label, key=checkbox_key)
                        if selected:
                            if tab_name not in all_selected_keywords:
                                all_selected_keywords[tab_name] = []
                            all_selected_keywords[tab_name].append(en_keyword)
                    col_idx = (col_idx + 1) % 3

        # --- Campos de Texto ---
        if "text_inputs" in data:
            for input_label, input_config in data["text_inputs"].items():
                input_key = f"text_input_{tab_name}_{input_config['key']}"

                current_value = st.text_input(input_label, key=input_key)
                all_text_inputs[input_config['key']] = current_value.strip()

                if input_config.get("required", False) and not current_value.strip():
                    required_fields_filled[input_config['key']] = False
                else:
                    required_fields_filled[input_config['key']] = True

# --- Gera√ß√£o e Exibi√ß√£o do Prompt Parcial (Atualiza√ß√£o em Tempo Real) ---
partial_prompt_parts_list = []
for tab_name, data_tab in sections_data.items():
    section_parts = []

    for input_label, input_config in data_tab.get("text_inputs", {}).items():
        key_in_prompt = input_config["key"]
        text_value = all_text_inputs.get(key_in_prompt, "").strip()
        if text_value and key_in_prompt != "Negative Prompt":
            section_parts.append(f"{key_in_prompt}: {text_value}")

    if tab_name in all_selected_keywords:
        if all_selected_keywords[tab_name]:
            section_parts.append(f"Keywords: {', '.join(all_selected_keywords[tab_name])}")

    if section_parts:
        partial_prompt_parts_list.append(f"[{tab_name}]: " + " | ".join(section_parts))

st.session_state.partial_prompt = textwrap.fill(" | ".join(partial_prompt_parts_list), width=100)

st.subheader("Prompt Parcial (Atualiza√ß√£o em tempo real):")
st.text_area("partial_prompt_display", value=st.session_state.partial_prompt, height=100, disabled=True)

# --- Bot√µes de A√ß√£o: Gerar ---
st.subheader("A√ß√µes:")
col_buttons = st.columns(1) # Cria uma √∫nica coluna

with col_buttons[0]: # Usa a primeira (e √∫nica) coluna
    if st.button("‚ú® Gerar Prompt Completo", use_container_width=True):
        is_missing = False
        for field_key, is_filled in required_fields_filled.items():
            if not is_filled:
                st.error(f"Por favor, preencha o campo obrigat√≥rio: '{field_key}'")
                is_missing = True
                break

        if is_missing:
            st.session_state.required_fields_missing = True
            st.session_state.generated_prompt = "Preencha todos os campos obrigat√≥rios para gerar o prompt."
        else:
            st.session_state.required_fields_missing = False
            full_prompt_parts = []
            negative_prompt_parts = []

            for tab_name, data_tab in sections_data.items():
                section_parts_for_prompt = []

                for input_label, input_config in data_tab.get("text_inputs", {}).items():
                    key_in_prompt = input_config["key"]
                    text_value = all_text_inputs.get(key_in_prompt, "").strip()
                    if text_value:
                        if key_in_prompt == "Negative Prompt":
                            negative_prompt_parts.append(text_value)
                        else:
                            section_parts_for_prompt.append(text_value)

                if tab_name in all_selected_keywords:
                    if all_selected_keywords[tab_name]:
                        section_parts_for_prompt.extend(all_selected_keywords[tab_name])

                if section_parts_for_prompt:
                    full_prompt_parts.append(", ".join(section_parts_for_prompt))

            final_prompt = ", ".join(full_prompt_parts)

            if negative_prompt_parts:
                final_prompt += " | Negative Prompt: " + ", ".join(negative_prompt_parts)

            st.session_state.generated_prompt = textwrap.fill(final_prompt, width=100)

# O bloco do bot√£o "Limpar Tudo" foi completamente removido, e a fun√ß√£o clear_all_inputs tamb√©m.


# --- Exibi√ß√£o do Prompt Completo ---
st.subheader("Prompt Completo (Pronto para copiar para o VEO3):")
st.text_area("full_prompt_display", value=st.session_state.generated_prompt, height=150)

if st.session_state.generated_prompt:
    st.info("Para copiar o prompt, selecione o texto acima e use Ctrl+C (ou Cmd+C no Mac).")

# Para rodar, salve este c√≥digo como 'prompt_builder_web.py' e no terminal, execute:
# python -m streamlit run prompt_builder_web.py